searchState.loadedDescShard("imgchest", 0, "An api operation was not successful\nAn api response is missing a message\nAn api response had un unknown message\nAn asynchronous request body.\nThe client\nAn implementation for storing and retrieving <code>Cookie</code>s per …\nA <code>cookie_store::CookieStore</code> wrapped internally by a …\nA builder for creating a post.\nThe error\nA file update as part of a bulk file update.\nFailed to parse post\nAn error that may occur while parsing a post\nFailed to parse user\nAn error that may occur while parsing a post\nA builder for listing posts\nThe post object from a list posts call.\nMissing description\nMissing images\nMissing a token\nSort by the newest posts\nSort by the oldest posts\nSort by the most popular posts\nAn API post object\nAn API file of a post\nThe post privacy\nRepresentation of an HTTP cookie.\nReqwest error\nA Post\nA post file\nA User\nSort order\nThe title is too short.\nFailed to join tokio task\nA builder for updating a post.\nA post file that is meant for uploading.\nA parsed URL record.\nThe user\nAdd images to a post.\nSet whether this post should be anonymous.\nWhether the post should be tied to the user.\nReturns a reference to the internal data of the <code>Body</code>.\nGet this as a str.\nReturn the serialization of this URL.\nReturn the authority of this URL as an ASCII string.\nCreates a new <code>CookieBuilder</code> starting from a <code>base</code> cookie.\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nClear the contents of the store\nThe inner http client\nThe number of comments on the post\nThe number of comments created by this user\nThe number of comments\nReturns true if the <code>CookieStore</code> contains an <strong>unexpired</strong> …\nReturns true if the <code>CookieStore</code> contains any (even an …\nCreate a post.\nThe time this was created\nThe time this image was created.\nThe time this user was created.\nThe time this user was created\nCreate a new, empty <code>CookieStoreMutex</code>\nDelete a file.\nDelete a post.\nThe url to delete this post\nThe file description\nThe file description\nThe file description.\nSerialize with Serde using the internal representation of …\nReturns the <code>Domain</code> of the cookie if one was specified.\nIf this URL has a host and it is a domain name (not an IP …\nReturns the <code>Domain</code> of <code>self</code> as a string slice of the raw …\nWraps <code>self</code> in an encoded <code>Display</code>: a cost-free wrapper …\nThe experience gained by the user?\nReturns the <code>Expiration</code> of the cookie if one was specified.\nReturns the expiration date-time of the cookie if one was …\nExtra key values\nFavorite or unfavorite a post.\nThe number of favorites by the user.\nFormats the cookie <code>self</code> as a <code>Set-Cookie</code> header value.\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate this from a raw reqwest body.\nCreate this from bytes.\nCreate a <code>CookieStore</code> from an iterator of <code>Cookie</code> values. …\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nCreate this from a file.\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nCreate this from a file at the given path.\nReturns a reference to the <strong>unexpired</strong> <code>Cookie</code> corresponding …\nReturns a reference to the (possibly <strong>expired</strong>) <code>Cookie</code> …\nGet the cookie store.\nGet a file by id.\nGet a post by id.\nReturn an <code>Iterator</code> of the cookies for <code>url</code> in the store, …\nReturn an <code>Iterator</code> of the cookie (<code>name</code>, <code>value</code>) pairs for …\nScrape a post from a post id.\nScrape a user from a username.\nGet a user by username.\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nReturns whether this cookie was marked <code>HttpOnly</code> or not. …\nThe post id\nThe post id\nThe id of the image\nThe id of the post\nThe file id\nThe file id\nAdd a new image to this post.\nThe number of images\nThe number of images\nThe images of the post\nThe files of this post\nPost images\nInserts <code>cookie</code>, received from <code>request_url</code>, into the store, …\nConverts a <code>cookie::Cookie</code> (from the <code>cookie</code> crate) into a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>CookieStoreMutex</code>, returning the underlying …\nConverts <code>self</code> into a <code>Cookie</code> with a static lifetime with as …\nReturn the serialization of this URL.\nReturn whether the URL is special (has a special scheme)\nAn iterator visiting all (including <strong>expired</strong>) cookies in …\nAn iterator visiting all the <strong>unexpired</strong> cookies in the store\nParse a string as an URL, with this URL as the base URL.\nThe post link\nThe link to the image file\nThe file link\nList posts from various sources.\nLoad cookies from <code>reader</code>, deserializing with …\nLoad cookies from <code>reader</code>, deserializing with …\nLoad JSON-formatted cookies from <code>reader</code>, skipping any …\nLoad JSON-formatted cookies from <code>reader</code>, loading both …\nLock and get a handle to the contained …\nMakes <code>self</code> a “permanent” cookie by extending its …\nCreates a relative URL if possible, with this URL as the …\nMake <code>self</code> a “removal” cookie by clearing its value, …\nReturns a collection of references to <strong>unexpired</strong> cookies …\nReturns the specified max-age of the cookie if one was …\nReturns the name of <code>self</code>.\nThe user’s name\nThe user name\nReturns the name of <code>self</code> as a string slice of the raw …\nReturns the name and value of <code>self</code> as a tuple of …\nReturns the name and trimmed value of <code>self</code> as a tuple of …\nCreates a new <code>Cookie</code> with the given name and an empty …\nCreate a new <code>CookieStoreMutex</code> from an existing …\nCreate a new builder.\nCreate an empty post update.\nMake a new builder\nMake a new client\nCreates a new <code>Cookie</code> with the given name and value.\nSet whether this post is nsfw.\nUpdate the nsfw flag.\nWhether this post is nsfw.\nWhether the post is nsfw\nWhether this is nsfw\nWhether the post is nsfw\nWhether this is nsfw\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nThe original name of the image.\nSet the page to get.\nThe page to get.\nParses a <code>Cookie</code> from the given HTTP cookie header value …\nParses a new <code>Cookie</code> from <code>cookie_str</code> and inserts it into …\nParse an absolute URL from a string.\nParses a <code>Cookie</code> from the given HTTP cookie header value …\nParse an absolute URL from a string and add params to its …\nReturns whether this cookie was marked <code>Partitioned</code> or not. …\nReturn the password for this URL, if any, as a …\nReturns the <code>Path</code> of the cookie if one was specified.\nReturn the path for this URL, as a percent-encoded ASCII …\nReturns the <code>Path</code> of <code>self</code> as a string slice of the raw …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nThe position of the image in the post.\nThe position of the image in the post.\nThe number of views all posts made by this user have …\nThe number of posts created by this user\nThe number of posts\nSet the post privacy.\nUpdate the privacy.\nThe post privacy.\nThe post privacy\nThe privacy of the post\nSet whether to list posts from the current user.\nWhether to list posts from the current user.\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nRemoves a <code>Cookie</code> from the store, returning the <code>Cookie</code> if …\n?\nReturns the <code>SameSite</code> attribute of this cookie if one was …\nSerialize any <strong>unexpired</strong> and <strong>persistent</strong> cookies in the …\nSerialize all (including <strong>expired</strong> and <strong>non-persistent</strong>) …\nSerialize all (including <strong>expired</strong> and <strong>non-persistent</strong>) …\nSerialize any <strong>unexpired</strong> and <strong>persistent</strong> cookies in the …\nReturn the scheme of this URL, lower-cased, as an ASCII …\nThe score of the post\nReturns whether this cookie was marked <code>Secure</code> or not. …\nSerialize with Serde using the internal representation of …\nSets the <code>domain</code> of <code>self</code> to <code>domain</code>.\nSets the expires field of <code>self</code> to <code>time</code>. If <code>time</code> is <code>None</code>, an\nChange this URL’s fragment identifier.\nChange this URL’s host.\nSets the value of <code>http_only</code> in <code>self</code> to <code>value</code>.  If <code>value</code> is …\nChange this URL’s host to the given IP address.\nSets the value of <code>max_age</code> in <code>self</code> to <code>value</code>. If <code>value</code> is …\nSets the name of <code>self</code> to <code>name</code>.\nSets the value of <code>partitioned</code> in <code>self</code> to <code>value</code>. If <code>value</code> is\nChange this URL’s password.\nSets the <code>path</code> of <code>self</code> to <code>path</code>.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nSets the value of <code>same_site</code> in <code>self</code> to <code>value</code>. If <code>value</code> is …\nChange this URL’s scheme.\nSets the value of <code>secure</code> in <code>self</code> to <code>value</code>. If <code>value</code> is <code>None</code>…\nSet the token to use for future requests.\nChange this URL’s username.\nSets the value of <code>self</code> to <code>value</code>.\nThe post slug\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nSet how posts should be sorted.\nHow posts should be sorted.\nParses the HTTP <code>Cookie</code> header, a series of cookie names …\nParses the HTTP <code>Cookie</code> header, a series of cookie names …\nStore the <code>cookies</code> received from <code>url</code>\nWraps <code>self</code> in a stripped <code>Display</code>]: a cost-free wrapper …\nThe thumbnail\nSet the title.\nUpdate the title.\nThe title of the post.\nThe title\nThe post title\nThe post title\nThe title of the post\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUnsets the <code>domain</code> of <code>self</code>.\nUnsets the <code>expires</code> of <code>self</code>.\nUnsets the <code>path</code> of <code>self</code>.\nUpdate a file.\nUpdate files in bulk.\nUpdate a post.\nSet the username to filter by.\nReturn the username for this URL (typically the empty …\nThe username to filter posts by.\nThe post author’s username\nThe author of the post\nReturns the value of <code>self</code>.\nReturns the value of <code>self</code> as a string slice of the raw …\nReturns the value of <code>self</code> with surrounding double-quotes …\nThe number of views\nThe number of views\nThe number of views\nSpecify a <code>publicsuffix::List</code> for the <code>CookieStore</code> to allow …\nWrap a <code>HttpBody</code> in a box inside <code>Body</code>.\nWrap a futures <code>Stream</code> in a box inside <code>Body</code>.\nThe unknown message")